---
- name: Create build dir
  file:
    state: directory
    dest: "{{ securedrop_app_code_deb_dir }}"

- name: Copy securedrop to build directory
  synchronize:
    src: "{{ role_path }}/../../../../securedrop/"
    dest: "{{ securedrop_app_code_deb_dir }}"
    delete: yes
    recursive: yes
    rsync_opts: "{{ securedrop_app_rsync_opts }}"

- name: Control the version of setuptools used in the default construction of virtual environments
  shell: |
    pip3 download --no-deps --require-hashes -r "{{ securedrop_pip_requirements }}" --dest /tmp/requirements-download
    rm -f /usr/share/python-wheels/setuptools-*.whl
    mv /tmp/requirements-download/setuptools-*.whl /usr/share/python-wheels/

- name: Build securedrop-app-code Debian package
  command: dpkg-buildpackage -us -uc
  args:
    chdir: "{{ securedrop_app_code_deb_dir }}"
  environment:
    DH_VIRTUALENV_INSTALL_ROOT: "/opt/venvs"
    PATH: /root/.cargo/bin:{{ ansible_env.PATH }}

- name: Find newly built Debian package
  find:
    paths:
      - "{{ securedrop_app_code_deb_dir }}/../"
      - "{{ securedrop_app_code_deb_dir }}"
    patterns:
      - '*.deb'
      - '*.tar.gz'
  register: securedrop_deb_package_find_results

- name: Fetch newly built Debian packages back to localhost
  fetch:
    src: "{{ item.path }}"
    dest: "{{ ossec_build_deb_package_local_dest_dir }}"
    flat: yes
    fail_on_missing: yes
  with_items: "{{ securedrop_deb_package_find_results.files }}"
